---
- name: decide make params
  set_fact:
    output_image_basename: "{{ target_image }}.{{ target_arch }}.{{ target_filetype }}"
    output_image_name: "{{ target_image }}.{{ target_arch }}.{{ target_filetype }}{{ '' if target_compression is undefined else '.'+target_compression }}"
    run_make_params:
      IMAGEDIR: "{{ custom_images_workdir if custom_images_workdir is defined else '' }}"

- name: run make for target image
  become: yes
  make:
    chdir: "{{ sample_images_workdir }}/osbuild-manifests"
    target: "{{ target_image }}.{{ target_arch }}.{{ target_filetype }}"
    params: "{{ run_make_params|dict2items|rejectattr('value', 'equalto', '')|list|items2dict }}"
  ignore_errors: true
  register: results

- name: Write log files
  copy:
    content: |
      chdir: {{ sample_images_workdir }}/osbuild-manifests
      target: {{ target_image }}.{{ target_arch }}.{{ target_filetype }}
      params: {{ run_make_params|dict2items|rejectattr('value', 'equalto', '')|list|items2dict }}
      {{ results.stdout }}
    dest: "./out/log.run_make.txt"
  delegate_to: localhost

- name: Error handler
  debug:
     var: results
  failed_when: true
  when:
     results is failed

- name: create target image manifest
  ansible.builtin.shell: >
    cat "{{ sample_images_build_path }}/{{ target_image }}.{{ target_arch }}.json"
    | jq '.sources["org.osbuild.curl"].items | to_entries[] | .value'
    | xargs -n 1 basename
    | sort -u
    > "{{ sample_images_workdir }}/osbuild-manifests/{{ output_image_basename }}.manifest"

- name: compress output (image)
  community.general.archive:
    path: "{{ sample_images_workdir }}/osbuild-manifests/{{ output_image_basename }}"
    dest: "{{ sample_images_workdir }}/osbuild-manifests/{{ output_image_name }}"
    format: "{{ target_compression }}"
    remove: true
  when:
    target_compression is defined

- name: gather output (image)
  fetch:
    src: "{{ sample_images_workdir }}/osbuild-manifests/{{ output_image_name }}"
    dest: "./out/"
    flat: yes
  when: discard_results|default(false)|bool == false

- name: gather output (osbuild json)
  fetch:
    src: "{{ sample_images_build_path }}/{{ target_image }}.{{ target_arch }}.json"
    dest: "./out/"
    flat: yes
  when: discard_results|default(false)|bool == false

- name: gather output (image manifest)
  fetch:
    src: "{{ sample_images_workdir }}/osbuild-manifests/{{ output_image_basename }}.manifest"
    dest: "./out/"
    flat: yes
  when: discard_results|default(false)|bool == false
